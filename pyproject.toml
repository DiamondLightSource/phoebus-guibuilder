[project]
name = "phoebus-guibuilder"
dynamic = ["version"]
description = "A package for building GUIs"
classifiers = [
    "Development Status :: 3 - Alpha",
    "License :: OSI Approved :: BSD License",
    "Programming Language :: Python :: 3.12",
]
urls = { GitHub = "https://github.com/DiamondLightSource/phoebus-guibuilder" }
authors = [
    { name = "Oliver Copping", email = "oliver.copping@diamond.ac.uk" },
    { name = "Adedamola Sode", email = "adedamola.sode@diamond.ac.uk" },
]
license = { file = "LICENSE" }
readme = "README.md"
requires-python = ">=3.12"
dependencies = ["pyyaml (>=6.0.2)"]
optional-dependencies = { dev = [
    "pre-commit",
    "pydata-sphinx-theme>=0.12",
    "pyright",
    "pytest",
    "pytest-asyncio",
    "pytest-cov",
    "pytest-faulthandler",
    "pytest-forked",
    "pytest-rerunfailures",
    "pytest-timeout",
    "ruff",
    "sphinx<7.4.0",
    "sphinx-autobuild",
    "autodoc-pydantic",
    "sphinxcontrib-mermaid",
    "sphinx-copybutton",
    "sphinx-design",
    "tox>=4.22",
    "types-mock",
    "types-pyyaml",
] }


[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning>=1.0.0,<2.0.0"]
build-backend = "poetry_dynamic_versioning.backend"

[tool.poetry]
include = ["src/phoebus_guibuilder/_version.py"]
version = "0.1.0"

[tool.poetry.requires-plugins]
poetry-dynamic-versioning = { version = ">=1.0.0,<2.0.0", extras = ["plugin"] }

[tool.poetry-dynamic-versioning]
enable = true
vcs = "git"
latest-tag = true
bump = true
metadata = false
# allows for tags with the format 0.1.0a1
pattern = "((?P<base>\\d+(\\.\\d+)*)(?P<stage>[a-zA-Z]+)?(?P<revision>\\d+)?)"

[tool.poetry-dynamic-versioning.files."src/phoebus_guibuilder/_version.py"]
persistent-substitution = true
initial-content = """
  # These version placeholders will be replaced later during substitution.
  __version__ = "0.1.0"
  __version_tuple__ = (0, 1, 0)
"""

[tool.poetry-dynamic-versioning.substitution]
folders = [{ path = "src" }]

# [tool.setuptools_scm]
# version_file = "src/phoebus_guibuilder/_version.py" # overwrites base version

[tool.pyright]
typeCheckingMode = "standard"
reportMissingImports = false  # Ignore missing stubs in imported modules

[tool.pytest.ini_options]
# Run pytest with all our checkers, and don't spam us with massive tracebacks on error
addopts = """
    --tb=native -vv --strict-markers --doctest-modules
    --doctest-glob="*.rst" --doctest-glob="*.md"
    --ignore=docs/examples --ignore=src/phoebus_guibuilder/epics/signal.py
    """
# https://iscinumpy.gitlab.io/post/bound-version-constraints/#watch-for-warnings
filterwarnings = "error"
# Doctest python code in docs, python code in src docstrings, test functions in tests
testpaths = "docs src tests"
log_format = "%(asctime)s,%(msecs)03d %(levelname)s (%(threadName)s) %(message)s"
log_date_format = "%H:%M:%S"

markers = [
    "motorsim: require the motorsim IOC to be running",
    "adsim: require the ADsim IOC to be running",
]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

[tool.coverage.run]
data_file = "/tmp/phoebus_guibuilder.coverage"

[tool.coverage.paths]
# Tests are run from installed location, map back to the src directory
source = ["src", "**/site-packages/"]

[tool.tox]
skipsdist = true

[tool.tox.env_run_base]
description = "Run pre-commit, type-checking, tests and docs"
direct = true
allowlist_externals = [
    "pytest",
    "pre-commit",
    "pyright",
    "sphinx-build",
    "sphinx-autobuild",
]
commands = [
    [
        "pre-commit",
        "run",
        "--all-files",
        "--show-diff-on-failure",
        "{posargs}",
    ],
    [
        "pyright",
        "src",
        "{posargs}",
    ],
    [
        "pytest",
        "--cov=phoebus_guibuilder",
        "--cov-report",
        "term",
        "--cov-report",
        "xml:cov.xml",
        "{posargs}",
    ],
    # TODO: Uncomment when needed
    # [
    #     "sphinx-{posargs:build}",
    #     "-EW",
    #     "--keep-going",
    #     "-T",
    #     "docs",
    #     "build/html",
    # ],
]

[tool.ruff]
src = ["src", "tests", "system_tests"]
line-length = 88
lint.select = [
    "B",   # flake8-bugbear - https://docs.astral.sh/ruff/rules/#flake8-bugbear-b
    "C4",  # flake8-comprehensions - https://docs.astral.sh/ruff/rules/#flake8-comprehensions-c4
    "E",   # pycodestyle errors - https://docs.astral.sh/ruff/rules/#error-e
    "F",   # pyflakes rules - https://docs.astral.sh/ruff/rules/#pyflakes-f
    "W",   # pycodestyle warnings - https://docs.astral.sh/ruff/rules/#warning-w
    "I",   # isort - https://docs.astral.sh/ruff/rules/#isort-i
    "UP",  # pyupgrade - https://docs.astral.sh/ruff/rules/#pyupgrade-up
    "SLF", # self - https://docs.astral.sh/ruff/settings/#lintflake8-self
]

[tool.ruff.lint.per-file-ignores]
# By default, private member access is allowed in tests
# See https://github.com/DiamondLightSource/python-copier-template/issues/154
# Remove this line to forbid private member access in tests
"tests/**/*" = ["SLF001"]
