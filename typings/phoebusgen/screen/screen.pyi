"""
This type stub file was generated by pyright.
"""

from typing import Union
from xml.etree.ElementTree import Element

def prettify(elem: Element) -> str:
    """Return a pretty-printed XML string for the Element.
    From: https://pymotw.com/3/xml.etree.ElementTree/create.html
    """
    ...

class Screen:
    """Phoebus Screen object that holds widgets and can be written to .bob file"""
    def __init__(self, name: str, f_name: str = ...) -> None:
        """
        Create Phoebus screen object. File name is optional and can be specified later

        :param name: Screen Name
        :param f_name: File name for Phoebus screen
        """
        ...

    def write_screen(self, file_name: str = ...) -> bool:
        """
        Writes screen XML to file. File name parameter is optional, if not given Screen bob_file member will be used

        :param file_name: File name to write to
        :return: True is successful write, False otherwise
        """
        ...

    def find_widget(self, widget_tag_name: str) -> Element:
        """
        Find widget in the screen

        :param widget_tag_name: Tag name of widget to find
        :return: None if not found or widget that was found
        """
        ...

    def add_widget(self, elem: list[object] | object) -> None:
        """
        Add widget or list of widgets to screen

        :param elem: <list/Phoebusgen.widget> List of Phoebusgen.widget's or a single widget to add
        """
        ...

    def width(self, val: int) -> None:
        """
        Change width of screen

        :param val: Screen width
        """
        ...

    def height(self, val: int) -> None:
        """
        Change height of screen

        :param val: Screen height
        """
        ...

    def macro(self, name: str, val: Union[str, int, float]) -> None:
        """
        Add macro to screen

        :param name: Macro name
        :param val: Macro value
        """
        ...

    def background_color(
        self, red: int, green: int, blue: int, alpha: int = ...
    ) -> None:
        """
        Add background color to screen RGB values

        :param red: 0-255
        :param green: 0-255
        :param blue: 0-255
        :param alpha: 0-255. Default is 255
        """
        ...

    def predefined_background_color(self, name: object) -> None:
        """
        Add named background color to screen

        :param name: <Phoebusgen.colors> Predefined color name
        """
        ...

    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
