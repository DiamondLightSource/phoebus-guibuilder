"""
This type stub file was generated by pyright.
"""

from xml.etree.ElementTree import Element

def prettify(elem):  # -> str:
    """Return a pretty-printed XML string for the Element.
    From: https://pymotw.com/3/xml.etree.ElementTree/create.html
    """
    ...

class _Generic:
    def __init__(self, w_type: str) -> None: ...
    def find_element(self, tag: str) -> Element:
        """
        Find first XML element in widget by tag name

        :param tag: Tag name to search for
        :return: Return XML element or None if not found
        """
        ...

    def remove_element(self, tag: str) -> None:
        """
        Delete XML element in widget by tag name

        :param tag: Tag name to delete
        """
        ...

    def get_element_value(self, tag: str) -> str:
        """
        Get value of an XML element by tag name

        :param tag: Tag name to get value from
        :return: Value of XML tag
        """
        ...

    def visible(self, visible: bool) -> None:
        """
        Change visible property for widget

        :param visible: Is widget visible?
        """
        ...

    def __str__(self) -> str: ...
    def __repr__(self):  # -> str:
        ...

class _Widget(_Generic):
    """Base Class for all Phoebus widgets"""
    def __init__(
        self, w_type: str, name: str, x_pos: int, y_pos: int, width: int, height: int
    ) -> None:
        """
        Base Class for all Phoebus widgets

        :param w_type: Widget type to be written into XML
        :param name: Widget name
        :param x: X position
        :param y: Y position
        :param width: Widget width
        :param height: Widget height:
        """
        ...

    def version(self, version: str) -> None:
        """
        Change widget version in root widget. i.e. <widget type="textupdate" version="2.0.0">

        :param version: Version string
        """
        ...

    def name(self, name: str) -> None:
        """
        Change widget name

        :param name: Widget name
        """
        ...

    def width(self, width: int) -> None:
        """
        Change widget width

        :param width: Width
        """
        ...

    def height(self, height: int) -> None:
        """
        Change widget height

        :param height: height
        """
        ...

    def x(self, val: int) -> None:
        """
        Change widget x position

        :param val: x
        """
        ...

    def y(self, val: int) -> None:
        """
        Change widget y position

        :param val: y
        """
        ...

    def rule(
        self,
        name: str,
        widget_property: str,
        pv_dict: dict,
        expression_dict: dict,
        value_as_expression: bool = ...,
    ) -> None:
        """
        Add a rule to the widget to control a property based on some logic

        :param name: Name of the rule
        :param widget_property: Property for rule to control, i.e. name, foreground_color, etc.
        :param pv_dict: Dictionary of PVs for the rule, format - { pvName: triggerOnPV }
        :param expression_dict: Dictionary of expressions for the rules, format - { boolean expression : value }
        :param value_as_expression: Defaults to False. If True, use value as expression
        """
        ...

    def embedded_python_script(
        self, python_script: str, pv_dict: dict, only_trigger_if_connected: bool = ...
    ) -> None:
        """
        Add an embedded Jython (Python) script to the widget

        :param python_script: Usually multi-line string representing the actual python code to attach to widget
        :param pv_dict: Dictionary of PVs for the script, format - { pvName: triggerOnPV }
        :param only_trigger_if_connected: Defaults to True. If False, script will run even if PVs are not connected
        """
        ...

    def embedded_javascript_script(
        self, js_script: str, pv_dict: dict, only_trigger_if_connected: bool = ...
    ) -> None:
        """
        Add an embedded JS script to the widget

        :param js_script: Usually multi-line string representing the actual JS code to attach to widget
        :param pv_dict: Dictionary of PVs for the script, format - { pvName: triggerOnPV }
        :param only_trigger_if_connected: Defaults to True. If False, script will run even if PVs are not connected
        """
        ...

    def external_script(
        self, file_name: str, pv_dict: dict, only_trigger_if_connected: bool = ...
    ) -> None:
        """
        Add an external script to the widget, either jython (.py) or javascript (.js)

        :param file_name: Path and file name of the external script to attach to widget
        :param pv_dict: Dictionary of PVs for the script, format - { pvName: triggerOnPV }
        :param only_trigger_if_connected: Defaults to True. If False, script will run even if PVs are not connected
        """
        ...

    def tool_tip(self, tool_tip: str) -> None:
        """
        Add tool tip string to widget

        :param tool_tip: Tool tip string
        """
        ...
