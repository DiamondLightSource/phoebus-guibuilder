"""
This type stub file was generated by pyright.
"""

from typing import Union

class _PVName:
    def pv_name(self, name: str) -> None:
        """
        Add PV name to widget

        :param name: PV name
        """
        ...

class _Font:
    def predefined_font(self, name: object) -> None:
        """
        Add named font property to widget

        :param name: <phoebusgen.fonts> Font name
        """
        ...

    def font_family(self, family: str) -> None:
        """
        Change font family property for widget

        :param family: Font Family name
        """
        ...

    def font_size(self, size: int) -> None:
        """
        Change font size property for widget

        :param size: Font size
        """
        ...

    def font_style_bold(self) -> None:
        """
        Change font style to Bold
        """
        ...

    def font_style_italic(self) -> None:
        """
        Change font style to Italic
        """
        ...

    def font_style_bold_italic(self) -> None:
        """
        Change font style to Bold & Italic
        """
        ...

    def font_style_regular(self) -> None:
        """
        Change font style to Regular
        """
        ...

class _TitleFont:
    def predefined_title_font(self, name: object) -> None:
        """
        Add named title font property to widget

        :param name: <phoebusgen.fonts> Font name
        """
        ...

    def title_font_family(self, family: str) -> None:
        """
        Change title font family property for widget

        :param family: Font Family name
        """
        ...

    def title_font_size(self, size: int) -> None:
        """
        Change title font size property for widget

        :param size: Font size
        """
        ...

    def title_font_style_bold(self) -> None:
        """
        Change title font style to Bold
        """
        ...

    def title_font_style_italic(self) -> None:
        """
        Change title font style to Italic
        """
        ...

    def title_font_style_bold_italic(self) -> None:
        """
        Change title font style to Bold & Italic
        """
        ...

    def title_font_style_regular(self) -> None:
        """
        Change title font style to Regular
        """
        ...

class _ScaleFont:
    def predefined_scale_font(self, name: object) -> None:
        """
        Add named scale font property to widget

        :param name: <phoebusgen.fonts> Font name
        """
        ...

    def scale_font_family(self, family: str) -> None:
        """
        Change scale font family property for widget

        :param family: Font Family name
        """
        ...

    def scale_font_size(self, size: int) -> None:
        """
        Change scale font size property for widget

        :param size: Font size
        """
        ...

    def scale_font_style_bold(self) -> None:
        """
        Change scale font style to Bold
        """
        ...

    def scale_font_style_italic(self) -> None:
        """
        Change scale font style to Italic
        """
        ...

    def scale_font_style_bold_italic(self) -> None:
        """
        Change scale font style to Bold & Italic
        """
        ...

    def scale_font_style_regular(self) -> None:
        """
        Change scale font style to Regular
        """
        ...

class _LabelFont:
    def predefined_label_font(self, name: object) -> None:
        """
        Add named label font property to widget

        :param name: <phoebusgen.fonts> Font name
        """
        ...

    def label_font_family(self, family: str) -> None:
        """
        Change label font family property for widget

        :param family: Font Family name
        """
        ...

    def label_font_size(self, size: int) -> None:
        """
        Change label font size property for widget

        :param size: Font size
        """
        ...

    def label_font_style_bold(self) -> None:
        """
        Change label font style to Bold
        """
        ...

    def label_font_style_italic(self) -> None:
        """
        Change label font style to Italic
        """
        ...

    def label_font_style_bold_italic(self) -> None:
        """
        Change label font style to Bold & Italic
        """
        ...

    def label_font_style_regular(self) -> None:
        """
        Change label font style to Regular
        """
        ...

class _ForegroundColor:
    def predefined_foreground_color(self, name: object) -> None:
        """
        Add named foreground color to widget

        :param name: <phoebusgen.colors> Predefined color name
        """
        ...

    def foreground_color(
        self, red: int, green: int, blue: int, alpha: int = ...
    ) -> None:
        """
        Add foreground color property to widget with RGB values

        :param red: 0-255
        :param green: 0-255
        :param blue: 0-255
        :param alpha: 0-255. Default is 255
        """
        ...

class _BackgroundColor:
    def predefined_background_color(self, name: object) -> None:
        """
        Add named background color to widget
        :param name: <phoebusgen.colors> Predefined color name
        """
        ...

    def background_color(
        self, red: int, green: int, blue: int, alpha: int = ...
    ) -> None:
        """
        Add background color property to widget with RGB values

        :param red: 0-255
        :param green: 0-255
        :param blue: 0-255
        :param alpha: 0-255. Default is 255
        """
        ...

class _Transparent:
    def transparent(self, transparent: bool = ...) -> None:
        """
        Change widget transparent property. Default arg is False

        :param transparent: Is widget transparent?
        """
        ...

class _Format:
    def format(self, format_val: str) -> None:
        """
        Add format property to widget, i.e. Decimal, Exponential, Engineering, String, etc

        :param format_val: Format String name
        :return:
        """
        ...

class _Precision:
    def precision(self, val: int) -> None:
        """
        Add precision value to widget

        :param val: Precision value
        """
        ...

class _ShowUnits:
    def show_units(self, show: bool = ...) -> None:
        """
        Change show units property to widget. Default arg is True

        :param show: Show units?
        """
        ...

class _HorizontalAlignment:
    def horizontal_alignment_left(self) -> None:
        """
        Change horizontal alignmnet to Left
        """
        ...

    def horizontal_alignment_center(self) -> None:
        """
        Change horizontal alignment to center
        """
        ...

    def horizontal_alignment_right(self) -> None:
        """
        Change horizontal alignment to right
        """
        ...

class _VerticalAlignment:
    def vertical_alignment_top(self) -> None:
        """
        Change vertical alignment to Top
        """
        ...

    def vertical_alignment_middle(self) -> None:
        """
        Change vertical alignment to Middle
        """
        ...

    def vertical_alignment_bottom(self) -> None:
        """
        Change vertical alignment to Bottom
        """
        ...

class _WrapWords:
    def wrap_words(self, wrap: bool = ...) -> None:
        """
        Change wrap words property. Default arg value is True

        :param wrap: Wrap words?
        """
        ...

class _Text:
    def text(self, text: str) -> None:
        """
        Add text property to widget

        :param text: Text string
        """
        ...

class _AutoSize:
    def auto_size(self, auto: bool = ...) -> None:
        """
        Change auto size property on widget. Default arg is True

        :param auto: Auto size widget?
        """
        ...

class _RotationStep:
    def rotation_step_0(self) -> None:
        """
        Change rotation step value to 0
        """
        ...

    def rotation_step_90(self) -> None:
        """
        Change rotation step value to 90
        """
        ...

    def rotation_step_180(self) -> None:
        """
        Change rotation step value to 180
        """
        ...

    def rotation_step_negative_90(self) -> None:
        """
        Change rotation step value to -90
        """
        ...

class _Border:
    def border_width(self, width: int) -> None:
        """
        Add border width property to widget

        :param width: Border width value
        """
        ...

    def predefined_border_color(self, name: object) -> None:
        """
        Change border color with named color

        :param name: <phoebusgen.colors> Predefined color name
        """
        ...

    def border_color(self, red: int, green: int, blue: int, alpha: int = ...) -> None:
        """
        Change border color with RGB values

        :param red: 0-255
        :param green: 0-255
        :param blue: 0-255
        :param alpha: 0-255. Default is 255
        """
        ...

class _Macro:
    def macro(self, name: str, val: Union[str, int, float]) -> None:
        """
        Add macro to widget

        :param name: Macro name
        :param val: Macro value
        """
        ...

class _Bit:
    def bit(self, val: int = ...) -> None:
        """
        Add bit property to widget. Default arg is -1

        :param val: Bit number
        """
        ...

class _OffColor:
    def predefined_off_color(self, name: object) -> None:
        """
        Add named color for Off Color property

        :param name: <phoebusgen.colors> Predefined color name
        """
        ...

    def off_color(self, red: int, green: int, blue: int, alpha: int = ...) -> None:
        """
        Add Off color property using RGB values

        :param red: 0-255
        :param green: 0-255
        :param blue: 0-255
        :param alpha: 0-255. Default is 255
        """
        ...

class _Off(_OffColor):
    def off_label(self, label: str) -> None:
        """
        Add Off label string to widget

        :param label: label
        """
        ...

class _OffImage(_Off):
    def off_image(self, image_file: str) -> None:
        """
        Add image for off property using file name

        :param image_file: Path to image file
        """
        ...

class _OnColor:
    def predefined_on_color(self, name: object) -> None:
        """
        Add named color for On Color property

        :param name: <phoebusgen.colors> Predefined color name
        """
        ...

    def on_color(self, red: int, green: int, blue: int, alpha: int = ...) -> None:
        """
        Add On color property using RGB values

        :param red: 0-255
        :param green: 0-255
        :param blue: 0-255
        :param alpha: 0-255. Default is 255
        """
        ...

class _On(_OnColor):
    def on_label(self, label: str) -> None:
        """
        Add On label string to widget

        :param label: label
        """
        ...

class _OnImage(_On):
    def on_image(self, image_file: str) -> None:
        """
        Add image for on property using file name

        :param image_file: Path to image file
        """
        ...

class _LineColor:
    def predefined_line_color(self, name: object) -> None:
        """
        Add named line color property

        :param name: <phoebusgen.colors> Predefined color name
        """
        ...

    def line_color(self, red: int, green: int, blue: int, alpha: int = ...) -> None:
        """
        Add line color property using RGB values

        :param red: 0-255
        :param green: 0-255
        :param blue: 0-255
        :param alpha: 0-255. Default is 255
        """
        ...

class _LineWidth:
    def line_width(self, width: int) -> None:
        """
        Add line width property to widget

        :param width: Line width
        """
        ...

class _Corner:
    def corner_width(self, width: int) -> None:
        """
        Add corner width property to widget

        :param width: Corner width
        """
        ...

    def corner_height(self, height: int) -> None:
        """
        Add corner height property to widget

        :param height: Corner height
        """
        ...

class _Square:
    def square(self, val: bool) -> None:
        """
        Change widget square property

        :param val: Is width square?
        """
        ...

class _LabelsFromPV:
    def labels_from_pv(self, val: bool) -> None:
        """
        Change labels from pv property for widget

        :param val: Show labels from PV?
        """
        ...

class _AlarmBorder:
    def alarm_border(self, val: bool) -> None:
        """
        Add alarm border property ON/OFF for widget

        :param val: Add alarm border to widget?
        """
        ...

class _Enabled:
    def enabled(self, val: bool) -> None:
        """
        Add enabled property to widget

        :param val: Is widget enabled?
        """
        ...

class _Confirmation:
    def confirmation_dialog(self, message: str, password: str = ...) -> None:
        """
        Add confirmation dialog to widget, i.e. Are you sure? . Default arg for password is None (no pw)

        :param message: Confirmation dialog message
        :param password: Password for dialog. Stored in plain text XML
        """
        ...

    def disable_confirmation_dialog(self) -> None:
        """
        Turn off confirmation dialog for widget
        """
        ...

class _MultiLine:
    def multi_line(self, val: bool) -> None:
        """
        Change Multi Line property for widget

        :param val: Use multi line?
        """
        ...

class _Angle:
    def angle_start(self, val: Union[float, int]) -> None:
        """
        Add angle start value for widget

        :param val: Start angle value
        """
        ...

    def angle_size(self, val: Union[float, int]) -> None:
        """
        Add angle size value for widget

        :param val: Angle size value
        """
        ...

class _Rotation:
    def rotation(self, val: Union[float, int]) -> None:
        """
        Add rotation value for widget

        :param val: Rotation value
        """
        ...

class _File:
    def file(self, val: str) -> None:
        """
        Add file name property to widget

        :param val: File name
        """
        ...

class _StretchToFit:
    def stretch_to_fit(self, val: bool) -> None:
        """
        Add stretch to fit property to widget

        :param val: Stretch widget to fit?
        """
        ...

class _Actions:
    def action_execute_as_one(self, val: bool) -> None:
        """
        Add execute all actions as one property to widget (execute all actions on button press)

        :param val: Execute all actions as one?
        """
        ...

    def action_open_display(
        self, file: str, target: str, description: str = ..., macros: dict = ...
    ) -> None:
        """
        Add open display action to widget. description and macros are optional params

        :param file: File name to open
        :param target: <specific strings only> tab, replace, window
        :param description: Description of action. Default is None
        :param macros: Dictionary of macros. key=macro name and value=macro value
        :return:
        """
        ...

    def action_write_pv(
        self, pv_name: str, value: Union[str, int, float], description: str = ...
    ) -> None:
        """
        Add Write PV action to widget. description is optional

        :param pv_name: PV name to write to
        :param value: Value to write to PV
        :param description: Description of action. Default is None
        """
        ...

    def action_execute_command(self, command: str, description: str = ...) -> None:
        """
        Add Execute Command action to widget. description is optional

        :param command: Command to run in action
        :param description: Description of action. Default is None
        """
        ...

    def action_execute_python_script(self, script: str, description: str = ...) -> None:
        """
        Add Execute Command action to widget. description is optional

        :param script: Python script to execute as action
        :param description: Description of action. Default is None
        """
        ...

    def action_execute_javascript_script(
        self, script: str, description: str = ...
    ) -> None:
        """
        Add Execute Command action to widget. description is optional

        :param script: Javascript code to execute as action
        :param description: Description of action. Default is None
        """
        ...

    def action_execute_external_script(
        self, file_name: str, description: str = ...
    ) -> None:
        """
        Add Execute Command action to widget. description is optional

        :param file_name: External script file name
        :param description: Description of action. Default is None
        """
        ...

    def action_open_file(self, file: str, description: str = ...) -> None:
        """
        Add Open File action to widget. description is optional

        :param file: File name to open
        :param description: Description of action. Default is None
        """
        ...

    def action_open_webpage(self, url: str, description: str = ...) -> None:
        """
        Add Open Webpage action to widget. description is optional

        :param url: URL to open
        :param description: Description of action. Default is None
        """
        ...

class _Label:
    def label(self, val: str) -> None:
        """
        Add label to widget

        :param val: Label
        """
        ...

class _Horizontal:
    def horizontal(self, val: bool) -> None:
        """
        Change horizontal property of widget

        :param val: Is widget horizontal?
        """
        ...

class _Items:
    def item(self, item_text: str) -> None:
        """
        Add item property to widget

        :param item_text: Item text string
        """
        ...

class _Traces:
    def add_trace(self, trace: object) -> None:
        """
        Add trace property to widget

        :param trace: trace object
        """
        ...

    def remove_trace(self, trace: object) -> None:
        """
        Removes trace from widget

        :param trace: trace object
        """
        ...

class _TraceType:
    def trace_type_none(self) -> None:
        """
        Change trace_type to none
        """
        ...

    def trace_type_line(self) -> None:
        """
        Change trace_type to line
        """
        ...

    def trace_type_step(self) -> None:
        """
        Change trace_type to step
        """
        ...

    def trace_type_error_bars(self) -> None:
        """
        Change trace_type to error bars
        """
        ...

    def trace_type_line_error_bars(self) -> None:
        """
        Change trace_type to line & error bars
        """
        ...

    def trace_type_bars(self) -> None:
        """
        Change trace_type to bars
        """
        ...

class _PointType:
    def point_type_none(self) -> None:
        """
        Change point type to none
        """
        ...

    def point_type_squares(self) -> None:
        """
        Change point type to squares
        """
        ...

    def point_type_circles(self) -> None:
        """
        Change point type to circles
        """
        ...

    def point_type_diamonds(self) -> None:
        """
        Change point type to diamonds
        """
        ...

    def point_type_x(self) -> None:
        """
        Change point type to x
        """
        ...

    def point_type_triangles(self) -> None:
        """
        Change point type to triangles
        """
        ...

class _PointSize:
    def point_size(self, size: int) -> None:
        """
        Set trace point size

        :param size: Trace point size
        """
        ...

class _Color:
    def color(self, red: int, green: int, blue: int, alpha: int = ...) -> None:
        """
        Add Fill Color property to widget with RGB values

        :param red: 0-255
        :param green: 0-255
        :param blue: 0-255
        :param alpha: 0-255. Default is 255
        """
        ...

    def predefined_color(self, name: object) -> None:
        """
        Add named color to widget
        :param name: <phoebusgen.colors> Predefined color name
        """
        ...

class _Name:
    def name(self, name: str) -> None:
        """
        Change trace name

        :param name: Trace name
        """
        ...

class _Axis:
    def axis(self, axis: int) -> None:
        """
        Determine which y-axis the trace is for

        :param axis: Trace y-axis
        """
        ...

class _XPV:
    def x_pv(self, pv: str) -> None:
        """
        Change trace x_pv value

        :param pv: Trace x_pv
        """
        ...

class _YPV:
    def y_pv(self, pv: str) -> None:
        """
        Change trace y_pv value

        :param pv: Trace y_pv
        """
        ...

class _ErrPV:
    def err_pv(self, pv: str) -> None:
        """
        Change trace err_pv value

        :param pv: Trace err_pv
        """
        ...

class _WidthPV:
    def width_pv(self, pv: str) -> None:
        """
        Change ROI width_pv value

        :param pv: ROI width_pv
        """
        ...

class _HeightPV:
    def height_pv(self, pv: str) -> None:
        """
        Change ROI height_pv value

        :param pv: ROI height_pv
        """
        ...

class _OnRight:
    def on_right(self, right: bool) -> None:
        """
        Change y-axis position on screen (left or right)
        :param right: Is y-axis on right side of screen?
        """
        ...

class _YAxes:
    def add_y_axis(self, axis: object) -> None:
        """
        Add y-axis property to widget

        :param axis: y-axis object
        """
        ...

    def remove_y_axis(self, axis: object) -> None:
        """
        Removes y-axis from widget

        :param axis: y-axis object
        """
        ...

class _YAxis:
    def add_y_axis(self, axis: object) -> None:
        """
        Add y-axis property to widget

        :param axis: y-axis object
        """
        ...

    def remove_y_axis(self, axis: object) -> None:
        """
        Removes y-axis from widget

        :param axis: y-axis object
        """
        ...

class _XAxis:
    def add_x_axis(self, axis: object) -> None:
        """
        Add x-axis property to widget

        :param axis: x-axis object
        """
        ...

    def remove_x_axis(self, axis: object) -> None:
        """
        Removes x-axis from widget

        :param axis: x-axis object
        """
        ...

class _Markers:
    def add_marker(self, marker: object) -> None:
        """
        Add marker property to widget

        :param marker: marker object
        """
        ...

    def remove_marker(self, marker: object) -> None:
        """
        Removes marker from widget

        :param marker: marker object
        """
        ...

class _Interactive:
    def interactive(self, val: bool) -> None:
        """
        Set marker as interactive

        :param val: Interactive?
        """
        ...

class _ItemsFromPV:
    def items_from_pv(self, val: bool) -> None:
        """
        Change Items from PV property to widget

        :param val: Use items from pv?
        """
        ...

class _ShowValueTip:
    def show_value_tip(self, val: bool) -> None:
        """
        Change Show Value Tip property to widget

        :param val: Show value tip?
        """
        ...

class _BarLength:
    def bar_length(self, val: Union[float, int]) -> None:
        """
        Change bar length property of widget

        :param val: Bar length value
        """
        ...

class _ShowValue:
    def show_value(self, val: bool) -> None:
        """
        Change show value property of widget

        :param val: Show value?
        """
        ...

class _ShowLimits:
    def show_limits(self, val: bool) -> None:
        """
        Change show limits property of widget

        :param val: Show limits?
        """
        ...

class _LimitsFromPV:
    def limits_from_pv(self, val: bool) -> None:
        """
        Change limits from PV property for widget

        :param val: Use limits from PV?
        """
        ...

class _MinMax:
    def minimum(self, val: Union[float, int]) -> None:
        """
        Add minimum value property to widget

        :param val: Minimum value
        """
        ...

    def maximum(self, val: Union[float, int]) -> None:
        """
        Add maximum value property to widget

        :param val: Maximum value
        """
        ...

class _NeedleColor:
    def needle_color(self, red: int, green: int, blue: int, alpha: int = ...) -> None:
        """
        Add Needle Color property to widget with RGB values

        :param red: 0-255
        :param green: 0-255
        :param blue: 0-255
        :param alpha: 0-255. Default is 255
        """
        ...

    def predefined_needle_color(self, name: object) -> None:
        """
        Add named Needle Color property to widget

        :param name: <phoebusgen.colors> Predefined color name
        """
        ...

class _KnobColor:
    def knob_color(self, red: int, green: int, blue: int, alpha: int = ...) -> None:
        """
        Add Knob Color property to widget with RGB values

        :param red: 0-255
        :param green: 0-255
        :param blue: 0-255
        :param alpha: 0-255. Default is 255
        """
        ...

    def predefined_knob_color(self, name: object) -> None:
        """
        Add named Knob Color property to widget

        :param name: <phoebusgen.colors> Predefined color name
        """
        ...

class _FillColor:
    def fill_color(self, red: int, green: int, blue: int, alpha: int = ...) -> None:
        """
        Add Fill Color property to widget with RGB values

        :param red: 0-255
        :param green: 0-255
        :param blue: 0-255
        :param alpha: 0-255. Default is 255
        """
        ...

    def predefined_fill_color(self, name: object) -> None:
        """
        Add named Fill Color property to widget

        :param name: <phoebusgen.colors> Predefined color name
        """
        ...

class _EmptyColor:
    def empty_color(self, red: int, green: int, blue: int, alpha: int = ...) -> None:
        """
        Add Empty Color property to widget with RGB values

        :param red: 0-255
        :param green: 0-255
        :param blue: 0-255
        :param alpha: 0-255. Default is 255
        """
        ...

    def predefined_empty_color(self, name: object) -> None:
        """
        Add named Empty Color property to widget

        :param name: <phoebusgen.colors> Predefined color name
        """
        ...

class _ScaleVisible:
    def scale_visible(self, val: bool) -> None:
        """
        Change Scale Visible property on widget

        :param val: Is scale visible?
        """
        ...

class _ShowLED:
    def show_led(self, val: bool) -> None:
        """
        Change Show LED property on widget

        :param val: Show LED?
        """
        ...

class _Mode:
    def mode_toggle(self) -> None:
        """
        Change mode to Toggle
        """
        ...

    def mode_push(self) -> None:
        """
        Change mode to Push
        """
        ...

    def mode_push_inverted(self) -> None:
        """
        Change mode to Push Inverted
        """
        ...

class _Style:
    def style_group_box(self) -> None:
        """
        Change widget style to Style Group Box
        """
        ...

    def style_title_bar(self) -> None:
        """
        Change widget style to Style Title Bar
        """
        ...

    def style_line(self) -> None:
        """
        Change widget style to Style Line
        """
        ...

    def no_style(self) -> None:
        """
        Change widget style to No Style
        """
        ...

class _ResizeBehavior:
    def no_resize(self) -> None:
        """
        Change resize behavior to No Resize
        """
        ...

    def size_content_to_fit_widget(self) -> None:
        """
        Change resize behavior to Size Content to Fit Widget
        """
        ...

    def size_widget_to_match_content(self) -> None:
        """
        Change resize behavior to Size Widget to Match Content
        """
        ...

    def stretch_content_to_fit_widget(self) -> None:
        """
        Change resize behavior to Stretch Content to Fit Widget
        """
        ...

    def crop_content(self) -> None:
        """
        Change resize behavior to Crop Content
        """
        ...

class _GroupName:
    def group_name(self, val: str) -> None:
        """
        Add group name to widget

        :param val: Name of group
        """
        ...

class _Structure:
    """
    This class is used for Structure widgets to be a method to add widgets to the structure
    """
    def add_widget(self, elem: Union[list, object]) -> None:
        """
        Add widget to structure element (group, etc.)

        :param elem: <Phoebusgen.widget> Element or List of Elements to add to structure
        """
        ...

class _URL:
    def url(self, url: str) -> None:
        """
        Add URL string property for widget

        :param url: URL string
        """
        ...

class _ShowToolbar:
    def show_toolbar(self, val: bool) -> None:
        """
        Change option to show toolbar property option for the widget

        :param val: Show toolbar?
        """
        ...

class _ButtonsOnLeft:
    def buttons_on_left(self, val: bool) -> None:
        """
        Change buttons on the left property option for widget

        :param val: Have button on the left?
        """
        ...

class _Increment:
    def increment(self, val: Union[float, int]) -> None:
        """
        Change increment property for widget

        :param val: Increment value
        """
        ...

class _FileComponent:
    def file_component_full_path(self) -> None:
        """
        Change file component to use full file path
        """
        ...

    def file_component_directory(self) -> None:
        """
        Change file component to use directory name
        """
        ...

    def file_component_name_and_extension(self) -> None:
        """
        Change file component to only use file name and extension
        """
        ...

    def file_component_base_name(self) -> None:
        """
        Change file component to only use file base name
        """
        ...

class _Editable:
    def editable(self, val: bool = ...) -> None:
        """
        Change editable property on the widget. Default arg is True

        :param val: Is widget editable?
        """
        ...

class _SelectedColor:
    def selected_color(self, red: int, green: int, blue: int, alpha: int = ...) -> None:
        """
        Add selected color property to widget

        :param red: 0-255
        :param green: 0-255
        :param blue: 0-255
        :param alpha: 0-255. Default is 255
        """
        ...

    def predefined_selected_color(self, name: object) -> None:
        """
        Add predefined selected color name to widget

        :param name: <phoebusgen.colors> Predefined color name
        """
        ...

class _DeselectedColor:
    def deselected_color(
        self, red: int, green: int, blue: int, alpha: int = ...
    ) -> None:
        """
        Add deselected color property to widget

        :param red: 0-255
        :param green: 0-255
        :param blue: 0-255
        :param alpha: 0-255. Default is 255
        """
        ...

    def predefined_deselected_color(self, name: object) -> None:
        """
        Add predefined deselected color name to widget

        :param name: <phoebusgen.colors> Predefined color name
        """
        ...

class _SelectionValuePV:
    def selection_value_pv(self, val: str) -> None:
        """
        Add selection value PV to widget

        :param val: PV Name for selection value pv
        """
        ...

class _Points:
    def point(self, x: int, y: int) -> None:
        """
        Add point to points property of a widget

        :param x: X position of the point
        :param y: Y position of the point
        """
        ...

class _Arrow:
    def arrow_length(self, length: int) -> None:
        """
        Change arrow length widget property

        :param length: Arrow length
        """
        ...

    def arrows_none(self) -> None:
        """
        Change arrow property to "None" for no arrows
        """
        ...

    def arrows_from(self) -> None:
        """
        Change arrow property to "From" for arrow direction
        """
        ...

    def arrows_to(self) -> None:
        """
        Change arrow property to "To" for arrow direction
        """
        ...

    def arrows_both(self) -> None:
        """
        Change arrow property to "Both"
        """
        ...

class _LineStyle:
    def line_style_solid(self) -> None:
        """
        Change line style to solid
        """
        ...

    def line_style_dashed(self) -> None:
        """
        Change line style to dashed
        """
        ...

    def line_style_dot(self) -> None:
        """
        Change line style to dot
        """
        ...

    def line_style_dash_dot(self) -> None:
        """
        Change line style to dash-dot
        """
        ...

    def line_style_dash_dot_dot(self) -> None:
        """
        Change line style to dash-dot-dot
        """
        ...

class _Tabs:
    def tab(self, name: str) -> None:
        """
        Add tab to the Tabs widget

        :param name: Tab name, should be unique
        """
        ...

    def add_widget(self, tab_name: str, elem: object) -> None:
        """
        Add widget to a specific tab with given tab_name

        :param tab_name: Name of the tab to add widget to
        :param elem: <Phoebusgen.widget> Widget to add to tab
        """
        ...

class _NavTabs:
    def tab(
        self, name: str, file_name: str, group_name: str, macros: dict = ...
    ) -> None:
        """
        Add tab to the Navigation Tab widget. Nav tabs use bob files. Macro arg is optional

        :param name: Tab name
        :param file_name: .bob file name
        :param group_name: Tab group name
        :param macros: Dictionary of macros. key=macro name and value=macro value
        """
        ...

class _ActiveTab:
    def active_tab(self, tab_num: int) -> None:
        """
        Select active tab number for the widget

        :param tab_num: Tab number to be active on page open
        """
        ...

class _TabHeight:
    def tab_height(self, height: int) -> None:
        """
        Add tab height property to widget

        :param height: Height value for tabs
        """
        ...

class _TabWidth:
    def tab_width(self, width: int) -> None:
        """
        Add tab width property to widget

        :param width: Width value for tabs
        """
        ...

class _TabSpacing:
    def tab_spacing(self, spacing: int) -> None:
        """
        Add tab spacing property to widget

        :param spacing: Tab spacing value
        """
        ...

class _Direction:
    def tab_direction_horizontal(self) -> None:
        """
        Change tab direction property to horizontal for widget
        """
        ...

    def tab_direction_vertical(self) -> None:
        """
        Change tab direction property to vertical for widget
        """
        ...

class _NumBits:
    def num_bits(self, number_of_bits: int) -> None:
        """
        Add number of bits property to widget

        :param number_of_bits: Number of bits
        """
        ...

class _StartBit:
    def start_bit(self, start_bit: int) -> None:
        """
        Adding start bit property to widget

        :param start_bit: Start bit
        """
        ...

class _ReverseBits:
    def reverse_bits(self, reverse_bits: bool = ...) -> None:
        """
        Add reverse bits option on widget. Default arg value is True

        :param reverse_bits: Reverse bits?
        """
        ...

class _Labels:
    def labels(self, label_list_or_name: Union[list, str]) -> None:
        """
        Add label property to widget

        :param label_list_or_name: List of label strings or a single label string
        """
        ...

class _ArrayIndex:
    def array_index(self, index: int) -> None:
        """
        Add array index to widget

        :param index: Array index
        """
        ...

class _Symbols:
    def symbols(self, symbol_list_or_string: Union[list, str]) -> None:
        """
        Add symbol to widget. Symbols can be file name or text symbol

        :param symbol_list_or_string: List of strings/file names or single string/file name
        """
        ...

class _InitialIndex:
    def initial_index(self, index: int) -> None:
        """
        Add initial index to widget

        :param index: Index
        """
        ...

class _ShowIndex:
    def show_index(self, show: bool = ...) -> None:
        """
        Add show index option on widget. Default arg value is True

        :param show: Show index?
        """
        ...

class _PreserveRatio:
    def preserve_ratio(self, preserve_ratio: bool = ...) -> None:
        """
        Add preserve ratio option on widget. Default arg value is True

        :param preserve_ratio: Preserve ratio?
        """
        ...

class _ShowScale:
    def show_scale(self, show: bool = ...) -> None:
        """
        Add show scale option on widget. Default arg value is True

        :param show: Show scale?
        """
        ...

class _ShowMinorTicks:
    def show_minor_ticks(self, show: bool = ...) -> None:
        """
        Add show minor ticks option on widget. Default arg value is True

        :param show: Show minor ticks?
        """
        ...

class _MajorTicksPixelDist:
    def major_ticks_pixel_dist(self, dist: int) -> None:
        """
        Add major ticks pixel distribution value to widget

        :param dist: Pixel distribution
        """
        ...

class _ScaleFormat:
    def scale_format(self, format_string: str) -> None:
        """
        Add scale format string to widget

        :param format_string: Formatting string, ex: #.##
        """
        ...

class _LevelsAndShow:
    def level_hihi(self, level: Union[float, int]) -> None:
        """
        Add HiHi level on widget

        :param level: HiHi level
        """
        ...

    def level_high(self, level: Union[float, int]) -> None:
        """
        Add High level on widget

        :param level: High level
        """
        ...

    def level_low(self, level: Union[float, int]) -> None:
        """
        Add Low level on widget

        :param level: Low level
        """
        ...

    def level_lolo(self, level: Union[float, int]) -> None:
        """
        Add LoLo level on widget

        :param level: LoLo level
        """
        ...

    def show_hihi(self, show: bool = ...) -> None:
        """
        Add ShowHiHi option on widget. Default arg is True

        :param show: Show HiHi?
        """
        ...

    def show_high(self, show: bool = ...) -> None:
        """
        Add ShowHigh option on widget. Default arg is True

        :param show: Show High?
        """
        ...

    def show_low(self, show: bool = ...) -> None:
        """
        Add ShowLow option on widget. Default arg is True

        :param show: Show Low?
        """
        ...

    def show_lolo(self, show: bool = ...) -> None:
        """
        Add ShowLoLo option on widget. Default arg is True

        :param show: Show LoLo?
        """
        ...

class _States:
    def state(
        self,
        state_value: int,
        label: str,
        red: int,
        green: int,
        blue: int,
        alpha: int = ...,
    ) -> None:
        """
        Add state color to widget with RGB values

        :param state_value: Integer value of the state
        :param label: State label
        :param red: 0-255
        :param green: 0-255
        :param blue: 0-255
        :param alpha: 0-255. Default is 255
        """
        ...

    def state_predefined_color(
        self, state_value: int, label: str, color_name: object
    ) -> None:
        """
        Add state color to widget with a named color

        :param state_value: Integer value of the state
        :param label: State label
        :param color_name: <phoebusgen.colors> Predefined color name
        """
        ...

class _Fallback:
    def fallback_label(self, label: str) -> None:
        """
        Add fallback label to widget

        :param label: label
        """
        ...

    def predefined_fallback_color(self, name: object) -> None:
        """
        Add fallback color to widget with a named color

        :param name: <phoebusgen.colors> Predefined color name
        """
        ...

    def fallback_color(self, red: int, green: int, blue: int, alpha: int = ...) -> None:
        """
        Add fallback color to widget with RGB values

        :param red: 0-255
        :param green: 0-255
        :param blue: 0-255
        :param alpha: 0-255. Default is 255
        """
        ...

class _SelectRows:
    def select_rows(self, select_rows: bool = ...) -> None:
        """
        Add row selection mode to widget. Default arg is True

        :param select_rows: Are rows selectable?
        """
        ...

class _SelectionPV:
    def selection_pv(self, name: str) -> None:
        """
        Add selection PV to widget

        :param name: PV Name
        """
        ...

class _Columns:
    def column(
        self, name: str, width: int, editable: bool, options: Union[list, str]
    ) -> None:
        """
        Add column property to widget

        :param name: Name of column
        :param width: Column width
        :param editable: Is column editable?
        :param options: List of strings or single string
        """
        ...

class _Title:
    def title(self, title: str) -> None:
        """
        Add title to widget

        :param title: Title
        """
        ...

class _AutoScale:
    def auto_scale(self, auto_scale: bool) -> None:
        """
        Add auto scale property to widget

        :param auto_scale: Auto scale image?
        """
        ...

class _DataHeightAndWidth:
    def data_height(self, height: int) -> None:
        """
        Add data height property to widget

        :param height: Data height
        """
        ...

    def data_width(self, width: int) -> None:
        """
        Add data width property to widget

        :param width: Data width
        """
        ...

class _UnsignedData:
    def unsigned_data(self, unsigned: bool = ...) -> None:
        """
        Add unsigned data property to widget. Default arg is True

        :param unsigned: Is data unsigned?
        """
        ...

class _LogScale:
    def log_scale(self, log_scale: bool = ...) -> None:
        """
        Add log scale property to widget. Default arg is True

        :param log_scale: Use log scale?
        """
        ...

class _ShowLegend:
    def show_legend(self, show_legend: bool = ...) -> None:
        """
        Add show legend property to widget. Default arg is True

        :param show_legend: Show legend?
        """
        ...

class _ShowGrid:
    def show_grid(self, show_grid: bool = ...) -> None:
        """
        Add show grid property to widget. Default arg is True

        :param show_grid: Show grid?
        """
        ...

class _TimeRange:
    def time_range(self, time_range: str) -> None:
        """
        Add time range of plot to widget

        :param time_range: Time range of plot, i.e. "5 minutes", "1 hour", etc
        """
        ...

class _GridColor:
    def predefined_grid_color(self, name: object) -> None:
        """
        Add named grid color property

        :param name: <phoebusgen.colors> Predefined color name
        """
        ...

    def grid_color(self, red: int, green: int, blue: int, alpha: int = ...) -> None:
        """
        Add grid color property using RGB values

        :param red: 0-255
        :param green: 0-255
        :param blue: 0-255
        :param alpha: 0-255. Default is 255
        """
        ...

class _Cursor:
    def cursor_info_pv(self, info_pv_name: str) -> None:
        """
        Add cursor info PV to widget

        :param info_pv_name: PV Name
        """
        ...

    def cursor_x_pv(self, x_pv_name: str) -> None:
        """
        Add cursor X PV to widget

        :param x_pv_name: PV Name
        """
        ...

    def cursor_y_pv(self, y_pv_name: str) -> None:
        """
        Add cursor Y PV to widget

        :param y_pv_name: PV Name
        """
        ...

    def cursor_crosshair(self, cursor_crosshair: bool = ...) -> None:
        """
        Toggle widget cursor crosshair property. Default arg is True

        :param cursor_crosshair: Is widget transparent?
        """
        ...

class _Interpolation:
    def interpolation_none(self) -> None:
        """
        Change interpolation to None
        """
        ...

    def interpolation_interpolate(self) -> None:
        """
        Change interpolation to Interpolate
        """
        ...

    def interpolation_automatic(self) -> None:
        """
        Change interpolation to Automatic
        """
        ...

class _ColorMode:
    def color_mode_CUSTOM(self) -> None:
        """
        Change color mode to CUSTOM
        """
        ...

    def color_mode_MONO(self) -> None:
        """
        Change color mode to MONO
        """
        ...

    def color_mode_BAYER(self) -> None:
        """
        Change color mode to BAYER
        """
        ...

    def color_mode_RGB1(self) -> None:
        """
        Change color mode to RGB1
        """
        ...

    def color_mode_RGB2(self) -> None:
        """
        Change color mode to RGB2
        """
        ...

    def color_mode_RGB3(self) -> None:
        """
        Change color mode to RGB3
        """
        ...

    def color_mode_YUV444(self) -> None:
        """
        Change color mode to YUV444
        """
        ...

    def color_mode_YUV422(self) -> None:
        """
        Change color mode to YUV422
        """
        ...

    def color_mode_YUV411(self) -> None:
        """
        Change color mode to YUV411
        """
        ...

    def color_mode_3BYTE_BGR(self) -> None:
        """
        Change color mode to 3BYTE_BGR
        """
        ...

    def color_mode_4BYTE_ABGR(self) -> None:
        """
        Change color mode to 4BYTE_ABGR
        """
        ...

    def color_mode_4BYTE_ABGR_PRE(self) -> None:
        """
        Change color mode to 4BYTE_ABGR_PRE
        """
        ...

    def color_mode_BYTE_BINARY(self) -> None:
        """
        Change color mode to BYTE_BINARY
        """
        ...

    def color_mode_BYTE_GRAY(self) -> None:
        """
        Change color mode to BYTE_GRAY
        """
        ...

    def color_mode_BYTE_INDEXED(self) -> None:
        """
        Change color mode to BYTE_INDEXED
        """
        ...

    def color_mode_INT_ARGB(self) -> None:
        """
        Change color mode to INT_ARGB
        """
        ...

    def color_mode_INT_ARGB_PRE(self) -> None:
        """
        Change color mode to INT_ARGB_PRE
        """
        ...

    def color_mode_INT_BGR(self) -> None:
        """
        Change color mode to INT_BGR
        """
        ...

    def color_mode_INT_RGB(self) -> None:
        """
        Change color mode to INT_RGB
        """
        ...

    def color_mode_USHORT_555_RGB(self) -> None:
        """
        Change color mode to USHORT_555_RGB
        """
        ...

    def color_mode_USHORT_565_RGB(self) -> None:
        """
        Change color mode to USHORT_565_RGB
        """
        ...

    def color_mode_USHORT_GRAY(self) -> None:
        """
        Change color mode to USHORT_GRAY
        """
        ...

class _RegionsOfInterest:
    def add_roi(self, roi: object) -> None:
        """
        Add ROI to list of ROIs for widget

        :param roi: ROI object
        """
        ...

    def remove_roi(self, roi: object) -> None:
        """
        Removes ROI from widget

        :param roi: ROI object
        """
        ...

class _ColorBarSize:
    def bar_size(self, val: int) -> None:
        """
        Add size value to color bar

        :param val: Bar size value
        """
        ...

class _ColorBar:
    def add_color_bar(self, bar: object) -> None:
        """
        Add color bar property to widget

        :param bar: Color bar object
        """
        ...

    def remove_color_bar(self, bar: object) -> None:
        """
        Removes color bar from widget

        :param bar: Color bar object
        """
        ...

class _ColorMap:
    def add_color_map(self, color: object) -> None:
        """
        Adds custom color map

        :param color: Color map object
        """
        ...

    def predefined_color_map(self, name: str) -> None:
        """
        Adds color map from one of the predefined enums

        :param name: Name of predefined color map
        """
        ...

    def remove_color_map(self, color: object) -> None:
        """
        Removes custom color map color

        :param color: Color map object
        """
        ...
